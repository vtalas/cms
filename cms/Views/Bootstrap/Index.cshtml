@using SquishIt.Framework
@using cms.Code.Bootstraper
<!DOCTYPE html>
<html ng-app>	
	<head>
		<title>@ViewBag.Title</title>

		@MvcHtmlString.Create(
			Bundle.JavaScript()
				.Add("~/Scripts/jquery-1.7.2.js")
				.Add("~/Scripts/angular.js")
				.Add("~/Scripts/angular-resource.js")
				.Add("~/Scripts/Coffee/Bootstrap.coffee")
				.Render("bootstrap_index#.js")
			)

	</head>
	
	 @helper VariablesGroup(string name,string id, string[] values){
	 	<text>
			<h3 ng-click="toggle('@id')">@name</h3>
			<div ng-show="toggleValue('@id')" ng-hide="!toggleValue('@id')">
				@values.List(
					@<text>@@@item<input ng-model="data.@item" ng-change="refresh()"/></text>
				)
			</div>
		</text>;
	 	
	 }


	<body ng-controller="bootstrap">
		<link href="@Url.Content("/bootstrap/UserBootstrap?{{refreshtoken}}")" rel="stylesheet" type="text/css" />
		<br />
		<br />
		<br />
		<br />
	<br />
	
		<div class="span3">
			@VariablesGroup("Grays", "grs", new[] { "black","grayDarker","grayDark","gray","grayLight","grayLighter","white"})
			@VariablesGroup("Accent colors", "acol", new[] { "blue", "blueDark", "green", "red", "yellow", "orange", "pink", "purple" })
			@VariablesGroup("Scaffolding", "scf", new[] { "bodyBackground", "textColor" })
			@VariablesGroup("Links", "lnks", new[] { "linkColor", "linkColorHover" })
		</div>
		<div class="span3">
			@VariablesGroup("Links", "lnks", new[] { "linkColor", "linkColorHover" })
		</div>

		<br clear="all" />
		
		<button ng-click="refresh()">refresh</button>

		@Html.Partial("csstest")
		
	</body>
</html>



